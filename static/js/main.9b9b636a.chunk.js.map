{"version":3,"sources":["tabEdit.js","App.js","serviceWorker.js","index.js"],"names":["convertTabTextToStrings","tab","tabLines","split","map","line","splitLine","tuning","notes","length","s","isNaN","parseInt","readTabLine","sections","tunings","i","trim","every","strings","x","leny","z","concat","y","filter","note","undefined","convertStringsToTabText","lineLength","minblocks","tuningPrefixes","repeat","parsed","string","lines","toString","replace","len","slice","join","push","j","lastLinesAreJustSpace","match","handleTabEdit","newStrings","cursorPosition","insertMode","lengths","min","Math","apply","max","minCount","maxCount","newCursor","firstDifferenceIndex","findFirstDifferenceIndex","lineIndex","findIndex","splice","cursorIndex","sectionSize","floor","findNewCursorPosition","noteAdded","modifier","tabHeight","App","props","state","currentTabText","currentStrings","songs","handleEditModeChange","bind","handleLoad","handleKeyPress","newTab","document","getElementById","firstElementChild","selectionStart","this","setState","event","target","value","handleTabLoad","loadedTab","files","context","reader","FileReader","onload","contents","result","readAsText","name","positive","Button","onClick","className","Grid","container","columns","stackable","Header","as","Column","Segment","List","link","type","onChange","Group","buildEditButton","Or","id","TextArea","rows","onKeyDown","textArea","selectionEnd","Component","Boolean","window","location","hostname","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iXACA,SAASA,EAAwBC,GAK/B,IAJA,IAAMC,EAAWD,EAAIE,MAAM,MAAMC,KAAI,SAACC,GAAD,OAwBvC,SAAqBA,GAEnB,IAAMC,EAAYD,EAAKF,MAAM,KACzBI,EAAS,GACTC,EAAQ,GAEa,IAArBF,EAAUG,OACZD,EAAQF,EAAU,IAElBC,EAASD,EAAU,GACnBE,EAAQF,EAAU,IAGpB,MAAO,CAACC,OAAQA,EAAQC,MAAQA,EAAML,MAAM,IAAIC,KAAI,SAACM,GAAD,OAAQC,MAAMD,IAAe,MAANA,GAA4B,EAAfE,SAASF,OArClDG,CAAYR,MACrDS,EAAWZ,EAASO,OAAS,EAC/BM,EAAU,GAELC,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAAC,IAAD,IAC1BD,EAAQC,IAAK,UAAAd,EAASc,UAAT,mBAAaT,cAAb,eAAqBU,SAAU,GAG1CF,EAAQG,OAAM,SAAAX,GAAM,OAAKA,GAAU,IAAMA,EAAOE,YAChDM,EAAU,IAId,IADA,IAAII,EAAU,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,IACrBC,EAAI,EAAGC,EAAOP,EAAUM,EAAIC,EAAMD,IACzC,IAAK,IAAIE,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAAC,IAAD,EAC1BH,EAAQG,GAAKH,EAAQG,GAAGC,OAAX,UAAkBrB,EAASoB,EAAM,EAAFF,UAA/B,aAAkB,EAAmBZ,OAGtD,IAAK,IAAIgB,EAAI,EAAGA,EAAI,EAAGA,IACrBL,EAAQK,GAAKL,EAAQK,GAAGC,QAAO,SAAAC,GAAI,YAAaC,IAATD,KAEzC,MAAO,CAACX,QAASA,EAASI,QAAQA,GAmBpC,SAASS,EAAwBT,EAASU,GAAkE,IAAtDC,EAAqD,uDAA3C,EAAGf,EAAwC,uDAAhC,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,KACnG,GAAuB,IAAnBI,EAAQV,OACV,MAAO,GAIT,IADA,IAAIsB,EAAiB,GACZP,EAAI,EAAGA,EAAI,EAAGA,IACrBO,EAAeP,GAAKT,EAAQS,GAAK,IAAIQ,OAAO,EAAEjB,EAAQS,GAAGf,QAAU,IAiBrE,IAbA,IAAIwB,EAASd,EAAQf,KAAI,SAAA8B,GAGvB,IAFA,IAAIC,EAAQ,GACNf,EAAIc,EAAO9B,KAAI,SAAAsB,GAAI,OAAIA,EAAKU,WAAWC,QAAQ,KAAM,QAClDrB,EAAI,EAAGsB,EAAMJ,EAAOzB,OAAOoB,EAAYb,EAAIsB,EAAKtB,IAAK,CAC5D,IAAIX,EAAOe,EAAEmB,MAAMvB,EAAEa,GAAab,EAAE,GAAGa,GAAYW,KAAK,IACpDnC,EAAKI,OAASoB,IAChBxB,GAAc,IAAI2B,OAAOH,EAAaxB,EAAKI,SAE7C0B,EAAMM,KAAKpC,GAEb,OAAO8B,KAGHF,EAAO,GAAGxB,OAASqB,GACvB,IAAI,IAAId,EAAI,EAAGA,EAAIG,EAAQV,OAAQO,IACjCiB,EAAOjB,GAAGyB,KAAK,IAAIT,OAAOH,IAM9B,IADA,IAAI5B,EAAM,GACDe,EAAI,EAAGsB,EAAML,EAAO,GAAGxB,OAAQO,EAAIsB,EAAKtB,IAAK,CACpD,IAAK,IAAI0B,EAAI,EAAGA,EAAI,EAAGA,IACrBzC,EAAIwC,KAAKV,EAAeW,GAAKT,EAAOS,GAAG1B,IAErCA,IAAMsB,EAAI,GACZrC,EAAIwC,KAAK,IAKb,GAAIR,EAAO,GAAGxB,OAASqB,EAAW,CAChC,IAAMa,EAAwB1C,EAAIsC,OAAO,GAAGrB,OAAM,SAAAb,GAAI,OAAKA,GAAQA,EAAKuC,MAAM,gBAC1ED,IACF1C,EAAMA,EAAIsC,MAAM,GAAI,IAIxB,OAAOtC,EAAIuC,KAAK,MAGlB,SAASK,EAAcC,EAAY3B,EAAS4B,EAAgBlB,EAAYmB,GACtE,IAAMC,EAAUH,EAAW1C,KAAI,SAAA8B,GAAM,OAAIA,EAAOzB,UAC1CyC,EAAMC,KAAKD,IAAIE,MAAMD,KAAMF,GAC3BI,EAAMF,KAAKE,IAAID,MAAMD,KAAMF,GAC3BK,EAAWL,EAAQxB,QAAO,SAAAhB,GAAM,OAAIyC,IAAQzC,KAAQA,OACpD8C,EAAWN,EAAQxB,QAAO,SAAAhB,GAAM,OAAI4C,IAAQ5C,KAAQA,OAE1D,GAAI4C,EAAMH,IAAQ,EAChB,MAAO,CAAEJ,WAAY3B,EAASqC,UAAWT,GAG3C,IAAIS,EAAYT,EAGhB,GAAiB,IAAbO,EAAgB,CAClB,IAAMG,EAAuBC,EAAyBX,EAAgBlB,GAAY,GAC5E8B,EAAYV,EAAQW,WAAU,SAAAnD,GAAM,OAAIA,IAAWyC,KACzD,GAAIF,EACF,IAAK,IAAIN,EAAI,EAAGA,EAAI,EAAGA,IAClBiB,IAAcjB,GACfI,EAAWJ,GAAGmB,OAAOJ,EAAsB,QAI/CX,EAAWa,GAAWE,OAAOJ,EAAsB,GAAI,GAK3D,GAAiB,IAAbF,EAAgB,CAClB,IAAME,EAAuBC,EAAyBX,EAAgBlB,GAAY,GAE5E8B,EAAYV,EAAQW,WAAU,SAAAnD,GAAM,OAAIA,IAAW4C,KACzD,GAAIL,EACF,IAAK,IAAIhC,EAAI,EAAGA,EAAI,EAAGA,IAClB2C,IAAc3C,GACf8B,EAAW9B,GAAG6C,OAAOJ,EAAqB,EAAG,GAAI,QAIrDX,EAAWa,GAAWE,OAAOJ,EAAsB,GAGrDD,EAkBJ,SAA+BM,EAAaH,EAAW9B,GACrD,IAAMkC,EAAyB,EAAXlC,EAAa,GAGjC,OADgBsB,KAAKa,MAAMF,EAAcjC,GAC1BkC,GAAclC,EAAW,GAAG8B,EAAYG,EAAYjC,EAAW,EAtBhEoC,CAAsBR,EAAsBE,EAAW9B,GAIrE,MAAO,CAAEiB,WAAYA,EAAYU,UAAWA,GAG9C,SAASE,EAAyBX,EAAgBlB,EAAYqC,GAC5D,IAAMH,EAAyB,EAAXlC,EAAa,GAE7BsC,GAAY,EAKhB,OAJID,GAAenB,EAAegB,GAAclC,EAAW,KAAQ,IACjEsC,GAAYtC,EAAa,GAGlBkB,EAAegB,GAAclC,EAAW,GANnCsB,KAAKa,MAAMjB,EAAiBgB,GAMoBlC,EAAcsC,EAU9E,SAASC,EAAUjD,EAASU,GAC1B,IAAIuC,EAAY,EAShB,OAPIjD,EAAQV,OAAS,IACnB2D,EAAYjB,KAAKa,OAAO7C,EAAQ,GAAGV,OAAS,GAAKoB,GAAc,GAE7DuC,EAAY,IACdA,EAAY,IAGI,EAAVA,EAAY,GAAGhC,W,IC3CViC,E,kDA3Hb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,eAAgB,GAChBC,eAAgB,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,IAChCzB,YAAW,EACXD,gBAAiB,EACjBlB,WAAY,GACZ6C,MAAO,GACP3D,QAAS,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,MAGrC,EAAK4D,qBAAuB,EAAKA,qBAAqBC,KAA1B,gBAC5B,EAAK/B,cAAgB,EAAKA,cAAc+B,KAAnB,gBAErB,EAAKC,WAAa,EAAKA,WAAWD,KAAhB,gBAClB,EAAKE,eAAiB,EAAKA,eAAeF,KAApB,gBAhBL,E,0DAmBLG,GACZ,IAAMhC,EAAiBiC,SAASC,eAAe,YAAYC,kBAAkBC,eACvEtD,EAAauD,KAAKb,MAAM1C,WACxB4C,EAAiBW,KAAKb,MAAME,eAC5BzB,EAAaoC,KAAKb,MAAMvB,WAJV,EAKOhD,EAAwB+E,GAA7ChE,EALc,EAKdA,QAASI,EALK,EAKLA,QACfJ,EAAUA,GAAWqE,KAAKb,MAAMxD,QANZ,MAQc8B,EAAc1B,EAASsD,EAAgB1B,EAAgBlB,EAAYmB,GAA7FF,EARY,EAQZA,WAAYU,EARA,EAQAA,UAEpB4B,KAAKC,SAAS,CACZZ,eAAgB3B,EAChBC,eAAgBS,EAChBzC,QAASA,M,oCAIEuE,GACb,IAAMP,EAASO,EAAMC,OAAOC,MAC5BJ,KAAKK,cAAcV,K,iCAQVO,GACT,IAAMI,EAAYJ,EAAMC,OAAOI,MAAM,GAC/BC,EAAUR,KAChB,GAAIM,EAAW,CACb,IAAMG,EAAS,IAAIC,WACnBD,EAAOE,OAAS,SAAS3E,GACvB,IAAM4E,EAAW5E,EAAEmE,OAAOU,OAC1BL,EAAQH,cAAcO,IAExBH,EAAOK,WAAWR,M,sCAINS,EAAMC,GACpB,OAAIA,EACO,kBAACC,EAAA,EAAD,CAAQD,UAAQ,GAAGD,GAEnB,kBAACE,EAAA,EAAD,CAAQC,QAASlB,KAAKT,sBAAuBwB,K,2CAIrCb,GACnBF,KAAKC,SAAS,CAACrC,YAAaoC,KAAKb,MAAMvB,e,qCAG1BsC,M,+BAKb,OACE,yBAAKiB,UAAU,OACb,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAGC,WAAS,GACnC,kBAACC,EAAA,EAAD,CAAQC,GAAG,MAAX,qBACA,kBAACL,EAAA,EAAKM,OAAN,KACE,kBAACC,EAAA,EAAD,CAASR,UAAU,kBACnB,kBAACS,EAAA,EAAD,CAAMC,MAAI,EAACV,UAAU,cAErB,yBAAKA,UAAU,YACb,2BAAOW,KAAK,OAAOC,SAAU/B,KAAKP,eAIpC,kBAACkC,EAAA,EAAD,KACE,kBAACV,EAAA,EAAOe,MAAR,KACGhC,KAAKiC,gBAAgB,SAAUjC,KAAKb,MAAMvB,YAC3C,kBAACqD,EAAA,EAAOiB,GAAR,MACClC,KAAKiC,gBAAgB,WAAYjC,KAAKb,MAAMvB,cAGjD,kBAAC+D,EAAA,EAAD,CAASQ,GAAG,YACV,kBAACC,EAAA,EAAD,CAAUC,KAAMrD,EAAUgB,KAAKb,MAAME,eAAgBW,KAAKb,MAAM1C,YAAa2D,MAAO5D,EAAwBwD,KAAKb,MAAME,eAAgBW,KAAKb,MAAM1C,WAAY,EAAGuD,KAAKb,MAAMxD,SAAU2G,UAAWtC,KAAKN,eAAgBqC,SAAU/B,KAAKvC,sB,2CAQ3N,IAAD,EACgBuC,KAAKb,MAAnCxB,EADc,EACdA,eAAgBlB,EADF,EACEA,WACrB,IAAyB,IAApBkB,EAAuB,CAC1B,IAAM4E,EAAW3C,SAASC,eAAe,YAAYC,kBAEjDnC,EAAiB4E,EAASnC,MAAM/E,SAClCsC,GAAqC,GAAlBlB,EAAa,GAAS,EAAIA,GAG/C8F,EAASxC,eAAiBpC,EAC1B4E,EAASC,aAAe7E,EACxBqC,KAAKC,SAAS,CACZtC,gBAAiB,S,GAtHP8E,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASrF,MACvB,2DCXNsF,IAASC,OACP,kBAAC,EAAD,MACAnD,SAASC,eAAe,SD0HpB,kBAAmBmD,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9b9b636a.chunk.js","sourcesContent":["\nfunction convertTabTextToStrings(tab) {\n  const tabLines = tab.split('\\n').map((line) => readTabLine(line));\n  const sections = tabLines.length / 7;\n  let tunings = [];\n\n  for (var i = 0; i < 6; i++) {\n    tunings[i] = tabLines[i]?.tuning?.trim() || '';\n  }\n\n  if (tunings.every(tuning => !tuning || 0 === tuning.length)) {\n      tunings = [];\n  }\n\n  let strings = [[],[],[],[],[],[]];\n  for (var x = 0, leny = sections; x < leny; x++) {\n    for (var z = 0; z < 6; z++) {\n      strings[z] = strings[z].concat(tabLines[z + x*7]?.notes)\n    }\n  }\n  for (var y = 0; y < 6; y++) {\n    strings[y] = strings[y].filter(note => note !== undefined);\n  }\n  return {tunings: tunings, strings:strings};\n}\n\nfunction readTabLine(line) {\n  // const allowedPattern = /([A-Fa-f][ #]\\|)?[\\-0-9hpb\\/\\\\]/;\n  const splitLine = line.split(\"|\");\n  let tuning = \"\";\n  let notes = \"\";\n\n  if (splitLine.length === 1) {\n    notes = splitLine[0];\n  } else {\n    tuning = splitLine[0];\n    notes = splitLine[1];\n  }\n\n  return {tuning: tuning, notes: (notes.split('').map((s) => !isNaN(s) && ! (s === \" \") ? parseInt(s) : -1))}\n}\n\nfunction convertStringsToTabText(strings, lineLength, minblocks=4, tunings=['e', 'B', 'G', 'D', 'A', 'E']) {\n  if (strings.length === 0) {\n    return \"\"\n  }\n\n  let tuningPrefixes = [];\n  for (var y = 0; y < 6; y++) {\n    tuningPrefixes[y] = tunings[y] + \" \".repeat(2-tunings[y].length) + \"|\"\n  };\n\n  // parsed guitar strings into arrays of rows to display\n  let parsed = strings.map(string => {\n    let lines = [];\n    const x = string.map(note => note.toString().replace('-1', '-'));\n    for (var i = 0, len = string.length/lineLength; i < len; i++) {\n      let line = x.slice(i*lineLength, (i+1)*lineLength).join('')\n      if (line.length < lineLength) {\n        line = line + \"-\".repeat(lineLength - line.length);\n      }\n      lines.push(line);\n    }\n    return lines;\n  });\n\n  while(parsed[0].length < minblocks) {\n    for(let i = 0; i < strings.length; i++) {\n      parsed[i].push(\"-\".repeat(lineLength));\n    }\n  }\n\n  // create single array of all lines to display\n  let tab = [];\n  for (var i = 0, len = parsed[0].length; i < len; i++) {\n    for (var j = 0; j < 6; j++) {\n      tab.push(tuningPrefixes[j] + parsed[j][i]);\n    }\n    if (i !== len-1) {\n      tab.push(\"\");\n    }\n  }\n\n\n  if (parsed[0].length > minblocks) {\n    const lastLinesAreJustSpace = tab.slice(-6).every(line => !line || line.match(/^..\\|-+$/g));\n    if (lastLinesAreJustSpace) {\n      tab = tab.slice(0, -6);\n    }\n  }\n\n  return tab.join(\"\\n\");\n}\n\nfunction handleTabEdit(newStrings, strings, cursorPosition, lineLength, insertMode) {\n  const lengths = newStrings.map(string => string.length);\n  const min = Math.min.apply(Math, lengths);\n  const max = Math.max.apply(Math, lengths);\n  const minCount = lengths.filter(length => min === length).length\n  const maxCount = lengths.filter(length => max === length).length\n\n  if (max - min !== 1) {\n    return { newStrings: strings, newCursor: cursorPosition};\n  }\n\n  let newCursor = cursorPosition;\n\n  // value has been removed\n  if (minCount === 1) {\n    const firstDifferenceIndex = findFirstDifferenceIndex(cursorPosition, lineLength, false);\n    const lineIndex = lengths.findIndex(length => length === min);\n    if (insertMode) {\n      for (var j = 0; j < 6; j++) {\n        if(lineIndex !== j) {\n          newStrings[j].splice(firstDifferenceIndex, 1);\n        }\n      }\n    } else {\n      newStrings[lineIndex].splice(firstDifferenceIndex, 0, -1);\n    }\n  }\n\n  // value has been added\n  if (maxCount === 1) {\n    const firstDifferenceIndex = findFirstDifferenceIndex(cursorPosition, lineLength, true);\n\n    const lineIndex = lengths.findIndex(length => length === max);\n    if (insertMode) {\n      for (var i = 0; i < 6; i++) {\n        if(lineIndex !== i) {\n          newStrings[i].splice(firstDifferenceIndex-1, 0, -1);\n        }\n      }\n    } else {\n      newStrings[lineIndex].splice(firstDifferenceIndex, 1);\n    }\n\n    newCursor = findNewCursorPosition(firstDifferenceIndex, lineIndex, lineLength);\n  }\n\n\n  return { newStrings: newStrings, newCursor: newCursor}\n}\n\nfunction findFirstDifferenceIndex(cursorPosition, lineLength, noteAdded) {\n  const sectionSize = lineLength*6+25;\n  let section = Math.floor(cursorPosition / sectionSize);\n  let modifier = -3;\n  if (noteAdded && ((cursorPosition%sectionSize)%(lineLength+4)) === 0) {\n    modifier += lineLength + 3\n\n  }\n  return ((cursorPosition%sectionSize)%(lineLength+4))+(section*lineLength) + modifier;\n}\n\nfunction findNewCursorPosition(cursorIndex, lineIndex, lineLength) {\n  const sectionSize = lineLength*6+25;\n\n  const section = Math.floor(cursorIndex / lineLength);\n  return section*sectionSize +(lineLength+4)*lineIndex + cursorIndex%lineLength+3;\n}\n\nfunction tabHeight(strings, lineLength) {\n  let tabHeight = 1\n\n  if (strings.length > 0) {\n    tabHeight = Math.floor((strings[0].length - 1) / lineLength) + 1\n  }\n  if (tabHeight < 4) {\n    tabHeight = 4\n  }\n\n  return (tabHeight*7-1).toString();\n}\n\nexport { convertTabTextToStrings, convertStringsToTabText, handleTabEdit, tabHeight } ;","import React, { Component } from 'react';\nimport './App.css';\nimport { Header, Grid, Segment, Button, List, TextArea } from 'semantic-ui-react'\nimport { convertStringsToTabText, convertTabTextToStrings, handleTabEdit, tabHeight } from './tabEdit';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentTabText: \"\",\n      currentStrings: [[],[],[],[],[],[]],\n      insertMode:false,\n      cursorPosition: -1,\n      lineLength: 65,\n      songs: [],\n      tunings: ['e', 'B', 'G', 'D', 'A', 'E']\n    };\n\n    this.handleEditModeChange = this.handleEditModeChange.bind(this);\n    this.handleTabEdit = this.handleTabEdit.bind(this);\n    // this.handleSave = this.handleSave.bind(this);\n    this.handleLoad = this.handleLoad.bind(this);\n    this.handleKeyPress = this.handleKeyPress.bind(this);\n  }\n\n  handleTabLoad(newTab) {\n    const cursorPosition = document.getElementById(\"tab-text\").firstElementChild.selectionStart;\n    const lineLength = this.state.lineLength;\n    const currentStrings = this.state.currentStrings;\n    const insertMode = this.state.insertMode;\n    let { tunings, strings } = convertTabTextToStrings(newTab);\n    tunings = tunings || this.state.tunings\n\n    const { newStrings, newCursor } = handleTabEdit(strings, currentStrings, cursorPosition, lineLength, insertMode)\n\n    this.setState({\n      currentStrings: newStrings,\n      cursorPosition: newCursor,\n      tunings: tunings\n    });\n  }\n\n   handleTabEdit(event) {\n    const newTab = event.target.value;\n    this.handleTabLoad(newTab);\n  }\n\n\n  // handleSave(event) {\n  //   console.log(\"saved\");\n  // }\n\n  handleLoad(event) {\n    const loadedTab = event.target.files[0];\n    const context = this;\n    if (loadedTab) {\n      const reader = new FileReader();\n      reader.onload = function(x) {\n        const contents = x.target.result;\n        context.handleTabLoad(contents);\n      };\n      reader.readAsText(loadedTab);\n    }\n  }\n\n  buildEditButton(name, positive) {\n    if (positive) {\n      return ( <Button positive >{name}</Button>)\n    } else {\n      return ( <Button onClick={this.handleEditModeChange}>{name}</Button>)\n    }\n  }\n\n  handleEditModeChange(event) {\n    this.setState({insertMode: !this.state.insertMode});\n  }\n\n  handleKeyPress(event) {\n    // console.log(event.key);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Grid container columns={1} stackable>\n          <Header as='h1'>React Tab Editor </Header>\n          <Grid.Column>\n            <Segment className=\"action-buttons\">\n            <List link className=\"tab-links\">\n            </List>\n            <div className=\"ui input\">\n              <input type=\"file\" onChange={this.handleLoad}/>\n            </div>\n\n            </Segment>\n            <Segment>\n              <Button.Group>\n                {this.buildEditButton('Insert', this.state.insertMode)}\n                <Button.Or />\n                {this.buildEditButton('Replace', !this.state.insertMode)}\n              </Button.Group>\n            </Segment>\n            <Segment id=\"tab-text\">\n              <TextArea rows={tabHeight(this.state.currentStrings, this.state.lineLength)} value={convertStringsToTabText(this.state.currentStrings, this.state.lineLength, 4, this.state.tunings)} onKeyDown={this.handleKeyPress} onChange={this.handleTabEdit}/>\n            </Segment>\n          </Grid.Column>\n        </Grid>\n      </div>\n    );\n  }\n\n  componentDidUpdate() {\n    let {cursorPosition, lineLength} = this.state;\n    if ( cursorPosition !== -1) {\n      const textArea = document.getElementById(\"tab-text\").firstElementChild;\n\n      if (cursorPosition > textArea.value.length) {\n        cursorPosition -= (lineLength + 1) * 6 + 1 - lineLength\n      }\n\n      textArea.selectionStart = cursorPosition\n      textArea.selectionEnd = cursorPosition\n      this.setState({\n        cursorPosition: -1\n      });\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'semantic-ui-css/semantic.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}